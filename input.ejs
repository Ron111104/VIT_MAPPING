<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bus Route Map</title>
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' />
    <style>
        body { margin: 0; padding: 0; }
        #map { position: absolute; top: 5%; left: 5%; bottom: 0; width: 90%; height: 90%; }
        .bus-route-select { position: absolute; top: 20px; left: 20px; z-index: 9999; background-color: #fff; padding: 10px; border-radius: 5px; }
        .search-button { position: absolute; top: 20px; right: 20px; z-index: 9999; padding: 10px 20px; background-color: #158ae6; color: #fff; border: none; border-radius: 5px; cursor: pointer; }
    </style>
</head>
<body>
    <div id="map"></div>
    <div class="bus-route-select">
        <label for="busRouteSelect">Select a Bus Route:</label>
        <select id="busRouteSelect">
            <option value="">Select a route</option>
            <% busRoutes.forEach(route => { %>
                <option value="<%= route.routeNumber %>"><%= route.routeNumber %></option>
            <% }); %>
        </select>
    </div>
    <button class="search-button" onclick="searchRoute()">Search</button>
    <script>
        var redMarkerCoords = [80.153963, 12.840722];
        var mapboxAccessToken = '<%= mapboxAccessToken %>';
        var busRoutes = [
            <% busRoutes.forEach((route, index) => { %>
                {
                    routeNumber: '<%= route.routeNumber %>',
                    color: '#'+Math.floor(Math.random()*16777215).toString(16), // Generate random color for each route
                    stops: [
                        <% route.stops.forEach(stop => { %>
                            {
                                name: '<%= stop.name %>',
                                time: '<%= stop.time %>',
                                coordinates: [<%= stop.coordinates.coordinates[0] %>, <%= stop.coordinates.coordinates[1] %>]
                            },
                        <% }); %>
                    ]
                }<% if (index < busRoutes.length - 1) { %>,<% } %>
            <% }); %>
        ];
        console.log(busRoutes);
        mapboxgl.accessToken = mapboxAccessToken;
        var map;

        function initializeMap() {
            if (map) {
                map.remove();
            }

            map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [80.0772106, 12.840641], // Center the map on a default location
                zoom: 10 // Adjust the zoom level as needed
            });

            var redMarkerCoords = [80.153963, 12.840722];
            new mapboxgl.Marker({
                color: 'red'
            })
            .setLngLat(redMarkerCoords)
            .setPopup(new mapboxgl.Popup().setHTML('<h4>VIT Chennai</h4>'))
            .addTo(map);
        }

        initializeMap();

        function searchRoute() {
            var selectedRouteNumber = document.getElementById('busRouteSelect').value;
            if (selectedRouteNumber) {
                var selectedRoute = busRoutes.find(route => route.routeNumber === selectedRouteNumber);
                if (selectedRoute) {
                    console.log(selectedRoute);
                    renderRouteOnMap(selectedRoute);
                }
            }
        }

        function renderRouteOnMap(route) {
    route.stops.forEach(stop => {
        if (stop.name !== "VIT UNIVERSITY") {
            console.log(stop);
            new mapboxgl.Marker({
                color: route.color // Set marker color to route's color
            })
            .setLngLat(stop.coordinates)
            .setPopup(new mapboxgl.Popup().setHTML('<h3>Route: ' + route.routeNumber + '</h3>' +
                                               '<p>Stop: ' + stop.name + '</p>' +
                                               '<p>Time: ' + stop.time + '</p>'))
            .addTo(map);
        }
    });
    for (let i = 0; i < route.stops.length - 1; i++) {
            const origin = route.stops[i].coordinates;
            const destination = route.stops[i + 1].coordinates;
            const directionsRequest = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + origin[0] + ',' + origin[1] + ';' + destination[0] + ',' + destination[1] + '?steps=true&geometries=geojson&access_token=' + mapboxAccessToken;

            fetch(directionsRequest)
                .then(response => response.json())
                .then(data => {
                    map.addLayer({
                        id: route.routeNumber + '-line-' + i,
                        type: 'line',
                        source: {
                            type: 'geojson',
                            data: data.routes[0].geometry
                        },
                        layout: {
                            'line-join': 'round',
                            'line-cap': 'round'
                        },
                        paint: {
                            'line-color': 'blue',
                            'line-width': 1
                        }
                    });
                })
                .catch(error => console.error('Error fetching route:', error));
        }
        const lastStop = route.stops[route.stops.length - 1].coordinates;
        const directionsRequestToRedMarker = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + lastStop[0] + ',' + lastStop[1] + ';' + redMarkerCoords[0] + ',' + redMarkerCoords[1] + '?steps=true&geometries=geojson&access_token=' + mapboxAccessToken;

        fetch(directionsRequestToRedMarker)
            .then(response => response.json())
            .then(data => {
                map.addLayer({
                    id: route.routeNumber + '-line-end',
                    type: 'line',
                    source: {
                        type: 'geojson',
                        data: data.routes[0].geometry
                    },
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    paint: {
                        'line-color': 'blue',
                        'line-width': 1
                    }
                });
            })
            .catch(error => console.error('Error fetching route to red marker:', error));
    }
    </script>
</body>
</html>


