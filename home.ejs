<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bus Routes Map</title>
    <script src='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.6.1/mapbox-gl.css' rel='stylesheet' />
    <style>
        body { margin: 0; padding: 0; }
        #map { position: absolute; top: 5%;left:5%; bottom: 0; width: 90%; height: 90%; }
    </style>
</head>
<body>
    <div id="map"></div>
    <script>
        // Access the Mapbox access token passed from the server
        var mapboxAccessToken = '<%= mapboxAccessToken %>';

        // Initialize map with the retrieved access token
        mapboxgl.accessToken = mapboxAccessToken;
        
        // Initialize map
        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [80.0772106, 12.840641], // Center the map on a default location
            zoom: 10 // Adjust the zoom level as needed
        });

        // Red marker coordinates
        var redMarkerCoords = [80.153963, 12.840722];

        // Add red marker for the specified coordinates
        new mapboxgl.Marker({
            color: 'red' // Set marker color to red
        })
        .setLngLat(redMarkerCoords)
        .setPopup(new mapboxgl.Popup().setHTML('<h4>VIT Chennai</h4>'))
        .addTo(map);

        // Bus routes data
        var busRoutes = [
            <% busRoutes.forEach((route, index) => { %>
                {
                    routeNumber: '<%= route.routeNumber %>',
                    color: '#'+Math.floor(Math.random()*16777215).toString(16), // Generate random color for each route
                    stops: [
                        <% route.stops.forEach(stop => { %>
                            {
                                name: '<%= stop.name %>',
                                time: '<%= stop.time %>',
                                coordinates: [<%= stop.coordinates.coordinates[0] %>, <%= stop.coordinates.coordinates[1] %>]
                            },
                        <% }); %>
                    ]
                }<% if (index < busRoutes.length - 1) { %>,<% } %>
            <% }); %>
        ];

        map.on('load', function() {
    // Object to keep track of added layers
    var addedLayers = {};

    // Add circles or markers for each stop with unique colors for each route
    busRoutes.forEach(route => {
        route.stops.forEach((stop, i) => {
            const layerId = stop.name + '-layer';
            if (i === 0) { // If it's the first stop, add a marker
                // Add marker for the specified coordinates
                new mapboxgl.Marker({
                    color: route.color // Set marker color to route's color
                })
                    .setLngLat(stop.coordinates)
                    .setPopup(new mapboxgl.Popup().setHTML('<h3>Route: ' + route.routeNumber + '</h3>' +
                                                       '<p>Stop: ' + stop.name + '</p>' +
                                                       '<p>Time: ' + stop.time + '</p>'))
                    .addTo(map);
            } else { // If it's not the first stop, add a circle
                const circleLayerId = stop.name + '-circle';

                // Check if the layer already exists
                if (!addedLayers[circleLayerId]) {
                    map.addLayer({
                        id: circleLayerId,
                        type: 'circle',
                        source: {
                            type: 'geojson',
                            data: {
                                type: 'Feature',
                                properties: {},
                                geometry: {
                                    type: 'Point',
                                    coordinates: stop.coordinates
                                }
                            }
                        },
                        paint: {
                            'circle-color': route.color, // Set circle color to route's color
                            'circle-radius': 5 // Adjust circle radius as needed
                        }
                    });

                    // Add click event listener to each circle
                    map.on('click', circleLayerId, function(e) {
                        var popupContent = '<h3>Route: ' + route.routeNumber + '</h3>' +
                                           '<p>Stop: ' + stop.name + '</p>' +
                                           '<p>Time: ' + stop.time + '</p>';

                        new mapboxgl.Popup()
                            .setLngLat(e.features[0].geometry.coordinates)
                            .setHTML(popupContent)
                            .addTo(map);
                    });

                    // Set the layer as added
                    addedLayers[circleLayerId] = true;
                }
            }
        });

        // Connect stops based on route directions
        for (let i = 0; i < route.stops.length - 1; i++) {
            const origin = route.stops[i].coordinates;
            const destination = route.stops[i + 1].coordinates;
            const directionsRequest = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + origin[0] + ',' + origin[1] + ';' + destination[0] + ',' + destination[1] + '?steps=true&geometries=geojson&access_token=' + mapboxAccessToken;

            fetch(directionsRequest)
                .then(response => response.json())
                .then(data => {
                    map.addLayer({
                        id: route.routeNumber + '-line-' + i,
                        type: 'line',
                        source: {
                            type: 'geojson',
                            data: data.routes[0].geometry
                        },
                        layout: {
                            'line-join': 'round',
                            'line-cap': 'round'
                        },
                        paint: {
                            'line-color': route.color,
                            'line-width': 1
                        }
                    });
                })
                .catch(error => console.error('Error fetching route:', error));
        }

        // Connect the last stop of each route to the red marker
        const lastStop = route.stops[route.stops.length - 1].coordinates;
        const directionsRequestToRedMarker = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + lastStop[0] + ',' + lastStop[1] + ';' + redMarkerCoords[0] + ',' + redMarkerCoords[1] + '?steps=true&geometries=geojson&access_token=' + mapboxAccessToken;

        fetch(directionsRequestToRedMarker)
            .then(response => response.json())
            .then(data => {
                map.addLayer({
                    id: route.routeNumber + '-line-end',
                    type: 'line',
                    source: {
                        type: 'geojson',
                        data: data.routes[0].geometry
                    },
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    paint: {
                        'line-color': route.color,
                        'line-width': 1
                    }
                });
            })
            .catch(error => console.error('Error fetching route to red marker:', error));
    });
});

    </script>
</body>
</html>
